# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Friendlier editor for beginners (for Git commit messages and whotnot)
#EDITOR=nano
EDITOR=vim

# Show raw (e.g., ANSI) characters and don't clear the screen after quitting;
# apparently the 'export' really is required, no joke.
export LESS='-RX'

# Vi keybinding mode. Un-comment it if you'd like to try it out.
#set -o vi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls -F --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions. See /usr/share/doc/bash-doc/examples in the bash-doc
# package.
#
# Since this script (as well as ~/.bash_aliases and ~/.bash_functions) get
# forcibly clobbered by the Ansible provisioner, allow users to add their own
# commands in ~/.bash_custom.
for rcfile in aliases functions custom; do
    if [ -f ~/.bash_$rcfile ]; then
        . ~/.bash_$rcfile
    fi
done

# Append ~/local/bin to the path (for things like 'fasd'):
# (now handled in the .profile; hope that's okay)
# pathappend $HOME/local/bin

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Source: https://github.com/kennethreitz/autoenv#using-git
if [ -f ~/devel/autoenv/activate.sh ]; then
    source ~/devel/autoenv/activate.sh
fi

# Source: https://github.com/clvv/fasd
if [ -f ~/local/bin/fasd ]; then
    eval "$(fasd --init auto)"
    alias j='fasd_cd -d'
    alias v='f -e vim' # quick opening files with vim
    _fasd_bash_hook_cmd_complete j v
fi

# Source: https://github.com/erichs/composure
if [ -f ~/devel/composure/composure.sh ]; then
    . ~/devel/composure/composure.sh

    # Update `composure` completions
    __update_completions() {
        complete -W \
            "$(ls $HOME/.local/composure/*.inc 2>/dev/null | sed 's/.*\/\(.*\)\.inc/\1/')" \
            reference revise write
    }
    promptcmdappend __update_completions
fi # composure

# Update prompt string based on return status of previous command
__update_ps1() {
    local EXIT=$?
    local status
    local user
    PS1=
    local Red='\[\e[0;31m\]'
    local Gre='\[\e[0;32m\]'
    local BYel='\[\e[1;33m\]'
    local BBlu='\[\e[1;34m\]'
    local Pur='\[\e[0;35m\]'
    local RCol='\[\e[0m\]'

    if [ $EXIT != 0 ]; then
        status="${Red}$SHLVL${RCol}" # add red for non-zero exit code
    else
        status="${Gre}$SHLVL${RCol}"
    fi

    if [ $UID -eq 0 ]; then
        user=${Red}root${RCol}
    else
        user='\u'
    fi

    # Add Python virtualenv to front of prompt string if we're in one, our
    # customizations seem to clobber 'autoenv' and/or 'virtualenv's ability to
    # update PS1 on their own.
    if [ -n "$VIRTUAL_ENV" ]; then
        PS1+="(${BYel}$(basename "$VIRTUAL_ENV")${RCol})"
    fi

    # And the rest of the stuff after that
    PS1+="${user}@${BBlu}\h:${Pur}\w${RCol}[$status]> "
}
# This really does need to be at the front, otherwise the '$?' above will
# probably just reflect the return value of the previous command in
# $PROMPT_COMMAND, which isn't very useful.
promptcmdprepend __update_ps1

# Start the SSH authentication agent upon login (but only once)
# Source: https://wiki.archlinux.org/index.php/SSH_keys#ssh-agent
if ! pgrep -u $USER ssh-agent > /dev/null; then
    ssh-agent > ~/.ssh-agent-thing
fi
if [ -z "$SSH_AGENT_PID" ]; then
    eval $(<~/.ssh-agent-thing)
fi
ssh-add -l >/dev/null || \
    alias ssh='ssh-add -l >/dev/null || ssh-add && unalias ssh; ssh'

# Create a symlink to the current auth socket each time a new shell is spawned;
# this allows a tmux session (with a corresponding change in ~/.tmux.conf) to
# connect to the same running agent.
# Source: https://gist.github.com/martijnvermaat/8070533#gistcomment-1386498
if [[ -n "$SSH_TTY" && -S "$SSH_AUTH_SOCK" ]]; then
    ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
fi

# Set the correct environment variables for Perl's local::lib
eval $(perl -Mlocal::lib)

# Source: https://docs.python.org/2/tutorial/interactive.html#key-bindings
test -f ~/.pystartup && export PYTHONSTARTUP=~/.pystartup
